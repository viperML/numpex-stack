---
import { RepologyService, type Package, urlFor } from '../services/repologyService';

// List of projects organized by categories
const projectCategories = {
  "General Purpose": [
    "cmake",
    "openmpi",
    "python:numpy",
    "python:scipy",
    "python:pillow",
    "python:pandas",
    "python:scikit-learn",
    "hdf5",
    "libyaml",
    "netcdf",
  ],
  "Numpex Stack": [
      "pdi",
      "deisa",
      "chameleon",
      "starpu",
      "parflow",
  ],
    "Distributed Computing": [
        "python:dask",
        "python:distributed",
        "python:ray",
    ],
    "PyTorch Ecosystem": [
        "python:torch",
        "python:torchsde",
        "python:torchaudio",
        "python:torchvision",
        "python:pytorch-lightning",
    ],
    "JAX Ecosystem": [
        "python:jax",
        "python:jaxtyping",
        "python:jaxlib",
        "python:flax",
        "python:optax",
        "python:chex",
        "python:orbax",
        "python:equinox",
    ],
    "AI Ecosystem": [
        "python:transformers",
        "python:accelerate",
        "python:safetensors",
        "python:tokenizers",
        "python:datasets",
        "python:gradio",
    ],
};

// Flatten all projects for the API call
const projects = Object.values(projectCategories).flat();

// List of repositories we're interested in
const targetRepos = ["spack", "gnuguix", "nix_unstable", "pypi"];

// Initialize the Repology service with caching and rate limiting
const repologyService = new RepologyService();

// Clean up expired cache entries on page load
await repologyService.cleanupExpiredCache();

// Fetch data for all projects using the service
const projectData = await repologyService.fetchMultipleProjects(projects);

// Helper function to compare versions (basic semantic version comparison)
function compareVersions(a: string, b: string): number {
  const aParts = a.split('.').map(part => parseInt(part.replace(/[^\d]/g, '')) || 0);
  const bParts = b.split('.').map(part => parseInt(part.replace(/[^\d]/g, '')) || 0);

  const maxLength = Math.max(aParts.length, bParts.length);

  for (let i = 0; i < maxLength; i++) {
    const aPart = aParts[i] || 0;
    const bPart = bParts[i] || 0;

    if (aPart > bPart) return 1;
    if (aPart < bPart) return -1;
  }

  return 0;
}

// Helper function to get the package with highest version for a specific repo
function getHighestVersionPackage(packages: Package[], repo: string): Package | undefined {
  const repoPackages = packages.filter(pkg => pkg.repo === repo && pkg.status !== "rolling");

  if (repoPackages.length === 0) return undefined;
  if (repoPackages.length === 1) return repoPackages[0];

  return repoPackages.reduce((highest, current) => {
    if (compareVersions(current.version, highest.version) > 0) {
      return current;
    }
    return highest;
  });
}

// Helper function to get version for a specific repo
function getVersionForRepo(packages: Package[], repo: string): string | undefined {
  const repoPackage = getHighestVersionPackage(packages, repo);
  return repoPackage ? repoPackage.version : undefined;
}

// Helper function to get status color
function getStatusColor(status?: string): string {
  switch (status) {
    case "newest": return "text-green-600";
    case "outdated": return "text-yellow-600";
    case "legacy": return "text-red-600";
    default: return "text-gray-600";
  }
}

// Helper function to get package status for a repo
function getPackageStatus(packages: Package[], repo: string): string | undefined {
  const repoPackage = getHighestVersionPackage(packages, repo);
  return repoPackage ? repoPackage.status : undefined;
}

// Helper function to get srcname for a specific repo
function getSrcnameForRepo(packages: Package[], repo: string): string | undefined {
  const repoPackage = getHighestVersionPackage(packages, repo);
  return repoPackage ? repoPackage.srcname : undefined;
}
---

<div class="container mx-auto p-6">
  <h1 class="text-3xl font-bold text-gray-900 mb-4 text-center">
    Package Version Tracker
  </h1>

  <div class="text-center mb-6 text-sm text-gray-600">
    Data is cached for 12 hours â€¢ Rate limited to 1 request/second
  </div>

  <div class="bg-white rounded-lg shadow-lg overflow-hidden">
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Package
            </th>
            {targetRepos.map(repo => (
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                {repo}
              </th>
            ))}
          </tr>
        </thead>
        <tbody class="bg-white">
          {Object.entries(projectCategories).map(([categoryName, categoryProjects], categoryIndex) => (
            <>
              <tr class="bg-gray-100">
                <td class="px-6 py-4 text-lg font-semibold text-gray-800" colspan={targetRepos.length + 1}>
                  {categoryName}
                </td>
              </tr>
              {categoryProjects.map((project) => {
                const projectInfo = projectData.find(p => p.project === project);
                const packages = projectInfo ? projectInfo.packages : [];
                return (
                  <tr class="hover:bg-gray-50 transition-colors border-t border-gray-200">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm font-medium text-gray-900">
                        {project}
                      </div>
                      <div class="text-sm text-gray-500">
                        {packages.find((p: Package) => targetRepos.includes(p.repo) && p.status !== "rolling")?.summary?.substring(0, 80) + '...' || 'Python package'}
                      </div>
                    </td>
                    {targetRepos.map(repo => {
                      const version = getVersionForRepo(packages, repo);
                      const status = getPackageStatus(packages, repo);
                      const srcname = getSrcnameForRepo(packages, repo);
                      const repoUrl = srcname ? urlFor(repo, srcname) : null;
                      return (
                        <td class="px-6 py-4 whitespace-nowrap">
                          {version ? (
                            <div class="flex flex-col">
                              {repoUrl ? (
                                <a
                                  href={repoUrl.toString()}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  class="text-sm font-semibold text-gray-900 underline decoration-dotted hover:decoration-solid hover:bg-gray-100 transition-all duration-150"
                                >
                                  {version}
                                </a>
                              ) : (
                                <span class="text-sm font-semibold text-gray-900">
                                  {version}
                                </span>
                              )}
                              <span class={`text-xs font-medium ${getStatusColor(status)}`}>
                                {status}
                              </span>
                            </div>
                          ) : (
                            <span class="text-sm text-gray-400 italic">
                              Not available
                            </span>
                          )}
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
              {categoryIndex < Object.entries(projectCategories).length - 1 && (
                <tr>
                  <td class="px-6 py-2" colspan={targetRepos.length + 1}>
                    <div class="border-b border-gray-300"></div>
                  </td>
                </tr>
              )}
            </>
          ))}
        </tbody>
      </table>
    </div>
  </div>

  <div class="mt-8 text-center">
    <div class="inline-flex items-center space-x-6 text-sm">
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-green-500 rounded-full"></div>
        <span class="text-gray-600">Newest</span>
      </div>
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
        <span class="text-gray-600">Outdated</span>
      </div>
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-red-500 rounded-full"></div>
        <span class="text-gray-600">Legacy</span>
      </div>
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-gray-400 rounded-full"></div>
        <span class="text-gray-600">Other/Unknown</span>
      </div>
    </div>
  </div>

  <div class="mt-6 text-center text-sm text-gray-500">
    Data provided by <a href="https://repology.org" class="text-blue-600 hover:text-blue-800 underline">Repology</a>
  </div>
</div>
